appId: com.mjdthif.dateme # Replace with your app's package ID
steps:
  # Start Client 1
  - launchApp:
      appId: com.mjdthif.dateme
  - waitForAppLaunch: 5000

  # Login as User 1
  - inputText:
      text: User1
      on: "#usernameInput" # Replace with your username input field ID
  - tapOn:
      id: "#loginButton" # Replace with your login button ID

  # Start sending messages periodically
  - repeat:
      times: 3
      steps:
        - inputText:
            text: "Message from User1"
            on: "#messageInput" # Replace with your message input field ID
        - tapOn:
            id: "#sendButton" # Replace with your send button ID
        - waitFor: 1000 # Wait for 1 second before sending the next message

  # Wait for message from Client 2
  - waitUntilVisible:
      id: "#messageReceived" # Replace with your message received field ID
      timeout: 15000 # Wait up to 15 seconds for the message

  # Validation: Check that message received matches expectation
  - assertText:
      text: "Message from User2" # Expected text from Client 2
      on: "#messageReceived" # Replace with your message received field ID

  # Close Client 1
  - stopApp:
      appId: com.mjdthif.dateme

  # Repeat steps for Client 2
  - launchApp:
      appId: com.mjdthif.dateme
  - waitForAppLaunch: 5000

  # Login as User 2
  - inputText:
      text: User2
      on: "#usernameInput" # Replace with your username input field ID
  - tapOn:
      id: "#loginButton" # Replace with your login button ID

  # Wait for message from Client 1
  - waitUntilVisible:
      id: "#messageReceived"
      timeout: 15000 # Wait up to 15 seconds for the message

  # Validation: Check that message received matches expectation
  - assertText:
      text: "Message from User1"
      on: "#messageReceived"

  # Send response message back to Client 1
  - inputText:
      text: "Message from User2"
      on: "#messageInput"
  - tapOn:
      id: "#sendButton"

  # Close Client 2
  - stopApp:
      appId: com.mjdthif.dateme
